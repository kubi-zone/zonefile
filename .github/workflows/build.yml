on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: build

jobs:
  build:
    name: build zonefile operator
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: set up qemu
        uses: docker/setup-qemu-action@v3

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: login to github packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: generate tags and labels
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache,mode=max

  # On push/merge to main, attempt to create git tag matching the version specified in Cargo.toml
  tag:
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: fetch version from Cargo.toml
        id: retrieve_tag
        run: echo "crate-tag=$(cat Cargo.toml | grep version | head -n1 | awk '{ print $3 }' | tr -d '"')" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: create git tag from version
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: "v"
          custom_tag: ${{ steps.retrieve_tag.outputs.crate-tag }}